// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[derive(Clone)]
pub struct Residueinfo {
    pub seqnumber: u64,
    pub insertioncode: _rt::String,
}
impl ::core::fmt::Debug for Residueinfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Residueinfo")
            .field("seqnumber", &self.seqnumber)
            .field("insertioncode", &self.insertioncode)
            .finish()
    }
}
#[derive(Clone)]
pub struct Residueinfos {
    pub chain: char,
    pub residues: _rt::Vec<Residueinfo>,
}
impl ::core::fmt::Debug for Residueinfos {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Residueinfos")
            .field("chain", &self.chain)
            .field("residues", &self.residues)
            .finish()
    }
}
#[derive(Clone)]
pub struct Pdbinfo {
    pub identifier: Option<_rt::String>,
    pub chains: _rt::Vec<char>,
    pub residuesequencenumbers: _rt::Vec<u64>,
    pub residuesperchain: _rt::Vec<Residueinfos>,
    pub warnings: _rt::Vec<_rt::String>,
}
impl ::core::fmt::Debug for Pdbinfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Pdbinfo")
            .field("identifier", &self.identifier)
            .field("chains", &self.chains)
            .field("residuesequencenumbers", &self.residuesequencenumbers)
            .field("residuesperchain", &self.residuesperchain)
            .field("warnings", &self.warnings)
            .finish()
    }
}
#[derive(Clone)]
pub struct Residue {
    pub serial_number: i64,
    pub name: _rt::String,
}
impl ::core::fmt::Debug for Residue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Residue")
            .field("serial-number", &self.serial_number)
            .field("name", &self.name)
            .finish()
    }
}
#[derive(Clone)]
pub struct Chain {
    pub id: _rt::String,
    pub residues: _rt::Vec<Residue>,
}
impl ::core::fmt::Debug for Chain {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Chain")
            .field("id", &self.id)
            .field("residues", &self.residues)
            .finish()
    }
}

#[derive(Debug)]
#[repr(transparent)]
pub struct Pdb {
    handle: _rt::Resource<Pdb>,
}

impl Pdb {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
        Self {
            handle: _rt::Resource::from_handle(handle),
        }
    }

    #[doc(hidden)]
    pub fn take_handle(&self) -> u32 {
        _rt::Resource::take_handle(&self.handle)
    }

    #[doc(hidden)]
    pub fn handle(&self) -> u32 {
        _rt::Resource::handle(&self.handle)
    }
}

unsafe impl _rt::WasmResource for Pdb {
    #[inline]
    unsafe fn drop(_handle: u32) {
        #[cfg(not(target_arch = "wasm32"))]
        unreachable!();

        #[cfg(target_arch = "wasm32")]
        {
            #[link(wasm_import_module = "$root")]
            extern "C" {
                #[link_name = "[resource-drop]pdb"]
                fn drop(_: u32);
            }

            drop(_handle);
        }
    }
}

impl Pdb {
    #[allow(unused_unsafe, clippy::all)]
    pub fn new() -> Self {
        unsafe {
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "$root")]
            extern "C" {
                #[link_name = "[constructor]pdb"]
                fn wit_import() -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import() -> i32 {
                unreachable!()
            }
            let ret = wit_import();
            Pdb::from_handle(ret as u32)
        }
    }
}
impl Pdb {
    #[allow(unused_unsafe, clippy::all)]
    pub fn info(&self) -> Result<Pdbinfo, _rt::Vec<_rt::String>> {
        unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "$root")]
            extern "C" {
                #[link_name = "[method]pdb.info"]
                fn wit_import(_: i32, _: *mut u8);
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8) {
                unreachable!()
            }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
                0 => {
                    let e = {
                        let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                        let l6 = *ptr0.add(16).cast::<*mut u8>();
                        let l7 = *ptr0.add(20).cast::<usize>();
                        let base9 = l6;
                        let len9 = l7;
                        let mut result9 = _rt::Vec::with_capacity(len9);
                        for i in 0..len9 {
                            let base = base9.add(i * 4);
                            let e9 = {
                                let l8 = *base.add(0).cast::<i32>();

                                _rt::char_lift(l8 as u32)
                            };
                            result9.push(e9);
                        }
                        _rt::cabi_dealloc(base9, len9 * 4, 4);
                        let l10 = *ptr0.add(24).cast::<*mut u8>();
                        let l11 = *ptr0.add(28).cast::<usize>();
                        let len12 = l11;
                        let l13 = *ptr0.add(32).cast::<*mut u8>();
                        let l14 = *ptr0.add(36).cast::<usize>();
                        let base23 = l13;
                        let len23 = l14;
                        let mut result23 = _rt::Vec::with_capacity(len23);
                        for i in 0..len23 {
                            let base = base23.add(i * 12);
                            let e23 = {
                                let l15 = *base.add(0).cast::<i32>();
                                let l16 = *base.add(4).cast::<*mut u8>();
                                let l17 = *base.add(8).cast::<usize>();
                                let base22 = l16;
                                let len22 = l17;
                                let mut result22 = _rt::Vec::with_capacity(len22);
                                for i in 0..len22 {
                                    let base = base22.add(i * 16);
                                    let e22 = {
                                        let l18 = *base.add(0).cast::<i64>();
                                        let l19 = *base.add(8).cast::<*mut u8>();
                                        let l20 = *base.add(12).cast::<usize>();
                                        let len21 = l20;
                                        let bytes21 =
                                            _rt::Vec::from_raw_parts(l19.cast(), len21, len21);

                                        Residueinfo {
                                            seqnumber: l18 as u64,
                                            insertioncode: _rt::string_lift(bytes21),
                                        }
                                    };
                                    result22.push(e22);
                                }
                                _rt::cabi_dealloc(base22, len22 * 16, 8);

                                Residueinfos {
                                    chain: _rt::char_lift(l15 as u32),
                                    residues: result22,
                                }
                            };
                            result23.push(e23);
                        }
                        _rt::cabi_dealloc(base23, len23 * 12, 4);
                        let l24 = *ptr0.add(40).cast::<*mut u8>();
                        let l25 = *ptr0.add(44).cast::<usize>();
                        let base29 = l24;
                        let len29 = l25;
                        let mut result29 = _rt::Vec::with_capacity(len29);
                        for i in 0..len29 {
                            let base = base29.add(i * 8);
                            let e29 = {
                                let l26 = *base.add(0).cast::<*mut u8>();
                                let l27 = *base.add(4).cast::<usize>();
                                let len28 = l27;
                                let bytes28 = _rt::Vec::from_raw_parts(l26.cast(), len28, len28);

                                _rt::string_lift(bytes28)
                            };
                            result29.push(e29);
                        }
                        _rt::cabi_dealloc(base29, len29 * 8, 4);

                        Pdbinfo {
                            identifier: match l2 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l3 = *ptr0.add(8).cast::<*mut u8>();
                                        let l4 = *ptr0.add(12).cast::<usize>();
                                        let len5 = l4;
                                        let bytes5 =
                                            _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                        _rt::string_lift(bytes5)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            chains: result9,
                            residuesequencenumbers: _rt::Vec::from_raw_parts(
                                l10.cast(),
                                len12,
                                len12,
                            ),
                            residuesperchain: result23,
                            warnings: result29,
                        }
                    };
                    Ok(e)
                }
                1 => {
                    let e = {
                        let l30 = *ptr0.add(4).cast::<*mut u8>();
                        let l31 = *ptr0.add(8).cast::<usize>();
                        let base35 = l30;
                        let len35 = l31;
                        let mut result35 = _rt::Vec::with_capacity(len35);
                        for i in 0..len35 {
                            let base = base35.add(i * 8);
                            let e35 = {
                                let l32 = *base.add(0).cast::<*mut u8>();
                                let l33 = *base.add(4).cast::<usize>();
                                let len34 = l33;
                                let bytes34 = _rt::Vec::from_raw_parts(l32.cast(), len34, len34);

                                _rt::string_lift(bytes34)
                            };
                            result35.push(e35);
                        }
                        _rt::cabi_dealloc(base35, len35 * 8, 4);

                        result35
                    };
                    Err(e)
                }
                _ => _rt::invalid_enum_discriminant(),
            }
        }
    }
}
impl Pdb {
    #[allow(unused_unsafe, clippy::all)]
    pub fn identifier(&self) -> Option<_rt::String> {
        unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "$root")]
            extern "C" {
                #[link_name = "[method]pdb.identifier"]
                fn wit_import(_: i32, _: *mut u8);
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8) {
                unreachable!()
            }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
                0 => None,
                1 => {
                    let e = {
                        let l2 = *ptr0.add(4).cast::<*mut u8>();
                        let l3 = *ptr0.add(8).cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                        _rt::string_lift(bytes4)
                    };
                    Some(e)
                }
                _ => _rt::invalid_enum_discriminant(),
            }
        }
    }
}
impl Pdb {
    #[allow(unused_unsafe, clippy::all)]
    pub fn chains(&self) -> _rt::Vec<Chain> {
        unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "$root")]
            extern "C" {
                #[link_name = "[method]pdb.chains"]
                fn wit_import(_: i32, _: *mut u8);
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8) {
                unreachable!()
            }
            wit_import((self).handle() as i32, ptr0);
            let l1 = *ptr0.add(0).cast::<*mut u8>();
            let l2 = *ptr0.add(4).cast::<usize>();
            let base13 = l1;
            let len13 = l2;
            let mut result13 = _rt::Vec::with_capacity(len13);
            for i in 0..len13 {
                let base = base13.add(i * 16);
                let e13 = {
                    let l3 = *base.add(0).cast::<*mut u8>();
                    let l4 = *base.add(4).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *base.add(8).cast::<*mut u8>();
                    let l7 = *base.add(12).cast::<usize>();
                    let base12 = l6;
                    let len12 = l7;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12.add(i * 16);
                        let e12 = {
                            let l8 = *base.add(0).cast::<i64>();
                            let l9 = *base.add(8).cast::<*mut u8>();
                            let l10 = *base.add(12).cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                            Residue {
                                serial_number: l8,
                                name: _rt::string_lift(bytes11),
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(base12, len12 * 16, 8);

                    Chain {
                        id: _rt::string_lift(bytes5),
                        residues: result12,
                    }
                };
                result13.push(e13);
            }
            _rt::cabi_dealloc(base13, len13 * 16, 4);
            result13
        }
    }
}
impl Pdb {
    #[allow(unused_unsafe, clippy::all)]
    pub fn warnings(&self) -> _rt::Vec<_rt::String> {
        unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "$root")]
            extern "C" {
                #[link_name = "[method]pdb.warnings"]
                fn wit_import(_: i32, _: *mut u8);
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8) {
                unreachable!()
            }
            wit_import((self).handle() as i32, ptr0);
            let l1 = *ptr0.add(0).cast::<*mut u8>();
            let l2 = *ptr0.add(4).cast::<usize>();
            let base6 = l1;
            let len6 = l2;
            let mut result6 = _rt::Vec::with_capacity(len6);
            for i in 0..len6 {
                let base = base6.add(i * 8);
                let e6 = {
                    let l3 = *base.add(0).cast::<*mut u8>();
                    let l4 = *base.add(4).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                    _rt::string_lift(bytes5)
                };
                result6.push(e6);
            }
            _rt::cabi_dealloc(base6, len6 * 8, 4);
            result6
        }
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_open_pdb_raw_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::open_pdb_raw(_rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    match result1 {
        Ok(e) => {
            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
            let (t3_0, t3_1) = e;
            *ptr2.add(4).cast::<i32>() = (t3_0).take_handle() as i32;
            let vec5 = t3_1;
            let len5 = vec5.len();
            let layout5 = _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 8, 4);
            let result5 = if layout5.size() != 0 {
                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                if ptr.is_null() {
                    _rt::alloc::handle_alloc_error(layout5);
                }
                ptr
            } else {
                {
                    ::core::ptr::null_mut()
                }
            };
            for (i, e) in vec5.into_iter().enumerate() {
                let base = result5.add(i * 8);
                {
                    let vec4 = (e.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *base.add(4).cast::<usize>() = len4;
                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                }
            }
            *ptr2.add(12).cast::<usize>() = len5;
            *ptr2.add(8).cast::<*mut u8>() = result5;
        }
        Err(e) => {
            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
            let vec7 = e;
            let len7 = vec7.len();
            let layout7 = _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 8, 4);
            let result7 = if layout7.size() != 0 {
                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                if ptr.is_null() {
                    _rt::alloc::handle_alloc_error(layout7);
                }
                ptr
            } else {
                {
                    ::core::ptr::null_mut()
                }
            };
            for (i, e) in vec7.into_iter().enumerate() {
                let base = result7.add(i * 8);
                {
                    let vec6 = (e.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    ::core::mem::forget(vec6);
                    *base.add(4).cast::<usize>() = len6;
                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                }
            }
            *ptr2.add(8).cast::<usize>() = len7;
            *ptr2.add(4).cast::<*mut u8>() = result7;
        }
    };
    ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_open_pdb_raw<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {
            let l3 = *arg0.add(8).cast::<*mut u8>();
            let l4 = *arg0.add(12).cast::<usize>();
            let base5 = l3;
            let len5 = l4;
            for i in 0..len5 {
                let base = base5.add(i * 8);
                {
                    let l1 = *base.add(0).cast::<*mut u8>();
                    let l2 = *base.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l1, l2, 1);
                }
            }
            _rt::cabi_dealloc(base5, len5 * 8, 4);
        }
        _ => {
            let l8 = *arg0.add(4).cast::<*mut u8>();
            let l9 = *arg0.add(8).cast::<usize>();
            let base10 = l8;
            let len10 = l9;
            for i in 0..len10 {
                let base = base10.add(i * 8);
                {
                    let l6 = *base.add(0).cast::<*mut u8>();
                    let l7 = *base.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l6, l7, 1);
                }
            }
            _rt::cabi_dealloc(base10, len10 * 8, 4);
        }
    }
}
pub trait Guest {
    fn open_pdb_raw(
        pdb: _rt::String,
    ) -> Result<(Pdb, _rt::Vec<_rt::String>), _rt::Vec<_rt::String>>;
}
#[doc(hidden)]

macro_rules! __export_world_pdbtbx_wit_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "open-pdb-raw"]
    unsafe extern "C" fn export_open_pdb_raw(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_open_pdb_raw_cabi::<$ty>(arg0, arg1)
    }
    #[export_name = "cabi_post_open-pdb-raw"]
    unsafe extern "C" fn _post_return_open_pdb_raw(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_open_pdb_raw::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_pdbtbx_wit_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_pdbtbx_wit_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_pdbtbx_wit_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_pdbtbx_wit_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:pdbtbx-wit:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 656] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x8f\x04\x01A\x02\x01\
A$\x01r\x02\x09seqnumberw\x0dinsertioncodes\x03\0\x0bresidueinfo\x03\0\0\x01p\x01\
\x01r\x02\x05chaint\x08residues\x02\x03\0\x0cresidueinfos\x03\0\x03\x01ks\x01pt\x01\
pw\x01p\x04\x01ps\x01r\x05\x0aidentifier\x05\x06chains\x06\x16residuesequencenum\
bers\x07\x10residuesperchain\x08\x08warnings\x09\x03\0\x07pdbinfo\x03\0\x0a\x01r\
\x02\x0dserial-numberx\x04names\x03\0\x07residue\x03\0\x0c\x01p\x0d\x01r\x02\x02\
ids\x08residues\x0e\x03\0\x05chain\x03\0\x0f\x03\0\x03pdb\x03\x01\x01i\x11\x01@\0\
\0\x12\x03\0\x10[constructor]pdb\x01\x13\x01h\x11\x01j\x01\x0b\x01\x09\x01@\x01\x04\
self\x14\0\x15\x03\0\x10[method]pdb.info\x01\x16\x01@\x01\x04self\x14\0\x05\x03\0\
\x16[method]pdb.identifier\x01\x17\x01p\x10\x01@\x01\x04self\x14\0\x18\x03\0\x12\
[method]pdb.chains\x01\x19\x01@\x01\x04self\x14\0\x09\x03\0\x14[method]pdb.warni\
ngs\x01\x1a\x01o\x02\x12\x09\x01j\x01\x1b\x01\x09\x01@\x01\x03pdbs\0\x1c\x04\0\x0c\
open-pdb-raw\x01\x1d\x04\x01\x1fcomponent:pdbtbx-wit/pdbtbx-wit\x04\0\x0b\x10\x01\
\0\x0apdbtbx-wit\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-componen\
t\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
